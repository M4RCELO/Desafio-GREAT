{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marce\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\C\\xF3digos\\\\React\\\\desafio-tecnico\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PieChart from './chart/piechart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [labels, setLabels] = useState(null);\n  const [values, setValues] = useState(null);\n  const [colors, setColors] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const generateRandomColor = () => {\n    // Generate a random hex color code\n    const randomColor = '#' + Math.floor(Math.random() * 16777215).toString(16);\n    return randomColor;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/estados/Nível V'); // Replace with your API endpoint\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const result = await response.json();\n        let labels = Object.keys(result);\n        let colors = [];\n        for (let i = 0; i < labels.length; i++) {\n          colors.push(generateRandomColor());\n        }\n        setLabels(labels);\n        setValues(Object.values(result));\n        setColors(colors);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n  const chartData = {\n    labels: labels,\n    values: values,\n    colors: colors\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Pie Chart Example\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 500\n      },\n      children: /*#__PURE__*/_jsxDEV(PieChart, {\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"EA4WhIVCjYS8qakxPJf/1t5KjaI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","PieChart","jsxDEV","_jsxDEV","App","_s","labels","setLabels","values","setValues","colors","setColors","loading","setLoading","error","setError","generateRandomColor","randomColor","Math","floor","random","toString","fetchData","response","fetch","ok","Error","result","json","Object","keys","i","length","push","children","fileName","_jsxFileName","lineNumber","columnNumber","message","chartData","style","width","data","_c","$RefreshReg$"],"sources":["C:/Users/marce/OneDrive/Área de Trabalho/Códigos/React/desafio-tecnico/src/App.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PieChart from './chart/piechart';\n\nconst App = () => {\n\n  const [labels, setLabels] = useState(null);\n  const [values, setValues] = useState(null);\n  const [colors, setColors] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  const generateRandomColor = () => {\n    // Generate a random hex color code\n    const randomColor = '#' + Math.floor(Math.random()*16777215).toString(16);\n    return randomColor;\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/estados/Nível V'); // Replace with your API endpoint\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const result = await response.json();\n        let labels = Object.keys(result)\n        let colors = []\n        for(let i=0;i<labels.length;i++){\n          colors.push(generateRandomColor())\n        }\n        setLabels(labels);\n        setValues(Object.values(result))\n        setColors(colors)\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []); \n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error: {error.message}</p>;\n  }\n\n  const chartData = {\n    labels: labels,\n    values: values,\n    colors: colors,\n  };\n\n  return (\n    <div>\n      <h1>Pie Chart Example</h1>\n      <div style={{width:500}}>\n        <PieChart data={chartData} />\n      </div>\n      \n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}