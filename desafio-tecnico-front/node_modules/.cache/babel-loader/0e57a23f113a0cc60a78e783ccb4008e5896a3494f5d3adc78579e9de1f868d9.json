{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marce\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\C\\xF3digos\\\\React\\\\desafio-tecnico\\\\src\\\\chart\\\\PieChartEstado.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Chart from 'chart.js/auto';\nimport 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PieChartEstado = () => {\n  _s();\n  const [labels, setLabels] = useState(null);\n  const [values, setValues] = useState(null);\n  const [colors, setColors] = useState(null);\n  const [chartData, setChartData] = useState(true);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const chartRef = useRef();\n  const chartInstance = useRef(null);\n  const generateRandomColor = () => {\n    // Generate a random hex color code\n    const randomColor = '#' + Math.floor(Math.random() * 16777215).toString(16);\n    return randomColor;\n  };\n  useEffect(() => {\n    const ctx = chartRef.current.getContext('2d');\n\n    // Destroy existing Chart instance if it exists\n    if (chartInstance.current) {\n      chartInstance.current.destroy();\n    }\n\n    // Create a new Chart instance\n    chartInstance.current = new Chart(ctx, {\n      type: 'pie',\n      data: {\n        labels: labels,\n        datasets: [{\n          data: values,\n          backgroundColor: colors\n        }]\n      }\n    });\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://127.0.0.1:5000/estados/Nível V'); // Replace with your API endpoint\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const result = await response.json();\n        let labels = Object.keys(result);\n        let colors = [];\n        for (let i = 0; i < labels.length; i++) {\n          colors.push(generateRandomColor());\n        }\n        setLabels(labels);\n        setValues(Object.values(result));\n        setColors(colors);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n      setChartData(chartData = {\n        labels: labels,\n        values: values,\n        colors: colors\n      });\n    };\n    fetchData();\n\n    // Clean up on component unmount\n    return () => {\n      if (chartInstance.current) {\n        chartInstance.current.destroy();\n      }\n    };\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"centered-content\",\n        children: [/*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), \";\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Classifica\\xE7\\xE3o INSE por estado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartData,\n      width: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), \";\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(PieChartEstado, \"i0AgojDbx3BJMYRVMEQjY6M+Lu0=\");\n_c = PieChartEstado;\nexport default PieChartEstado;\nvar _c;\n$RefreshReg$(_c, \"PieChartEstado\");","map":{"version":3,"names":["React","useState","useEffect","useRef","CircularProgress","Chart","jsxDEV","_jsxDEV","PieChartEstado","_s","labels","setLabels","values","setValues","colors","setColors","chartData","setChartData","loading","setLoading","error","setError","chartRef","chartInstance","generateRandomColor","randomColor","Math","floor","random","toString","ctx","current","getContext","destroy","type","data","datasets","backgroundColor","fetchData","response","fetch","ok","Error","result","json","Object","keys","i","length","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","message","ref","width","_c","$RefreshReg$"],"sources":["C:/Users/marce/OneDrive/Área de Trabalho/Códigos/React/desafio-tecnico/src/chart/PieChartEstado.jsx"],"sourcesContent":["import React, { useState ,useEffect, useRef } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Chart from 'chart.js/auto';\r\nimport 'chart.js/auto';\r\n\r\nconst PieChartEstado = () => {\r\n\r\n  const [labels, setLabels] = useState(null);\r\n  const [values, setValues] = useState(null);\r\n  const [colors, setColors] = useState(null);\r\n  const [chartData, setChartData] = useState(true);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  const chartRef = useRef();\r\n  const chartInstance = useRef(null);\r\n\r\n  const generateRandomColor = () => {\r\n    // Generate a random hex color code\r\n    const randomColor = '#' + Math.floor(Math.random()*16777215).toString(16);\r\n    return randomColor;\r\n  };\r\n  \r\n  useEffect(() => {\r\n\r\n    const ctx = chartRef.current.getContext('2d');\r\n\r\n    // Destroy existing Chart instance if it exists\r\n    if (chartInstance.current) {\r\n      chartInstance.current.destroy();\r\n    }\r\n\r\n    // Create a new Chart instance\r\n    chartInstance.current = new Chart(ctx, {\r\n      type: 'pie',\r\n      data: {\r\n        labels: labels,\r\n        datasets: [{\r\n          data: values,\r\n          backgroundColor: colors,\r\n        }],\r\n      },\r\n    });\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('http://127.0.0.1:5000/estados/Nível V'); // Replace with your API endpoint\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        const result = await response.json();\r\n        let labels = Object.keys(result)\r\n        let colors = []\r\n        for(let i=0;i<labels.length;i++){\r\n          colors.push(generateRandomColor())\r\n        }\r\n        setLabels(labels);\r\n        setValues(Object.values(result))\r\n        setColors(colors)\r\n      } catch (error) {\r\n        setError(error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n\r\n      setChartData(chartData = {\r\n        labels: labels,\r\n        values: values,\r\n        colors: colors,\r\n      })\r\n\r\n    };\r\n\r\n    fetchData();\r\n    \r\n    // Clean up on component unmount\r\n    return () => {\r\n      if (chartInstance.current) {\r\n        chartInstance.current.destroy();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return(\r\n      <div className=\"centered-container\">\r\n        <div className=\"centered-content\">\r\n          <CircularProgress/>;\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (error) {\r\n    return <p>Error: {error.message}</p>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Classificação INSE por estado</h1>\r\n      <canvas ref={chartData} width={500}/>;\r\n    </div>\r\n  )\r\n    \r\n    \r\n};\r\n  \r\nexport default PieChartEstado;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,gBAAgB,MAAM,oCAAoC;AACjE,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAO,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvB,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE3B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMqB,QAAQ,GAAGnB,MAAM,CAAC,CAAC;EACzB,MAAMoB,aAAa,GAAGpB,MAAM,CAAC,IAAI,CAAC;EAElC,MAAMqB,mBAAmB,GAAGA,CAAA,KAAM;IAChC;IACA,MAAMC,WAAW,GAAG,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAC,QAAQ,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;IACzE,OAAOJ,WAAW;EACpB,CAAC;EAEDvB,SAAS,CAAC,MAAM;IAEd,MAAM4B,GAAG,GAAGR,QAAQ,CAACS,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;;IAE7C;IACA,IAAIT,aAAa,CAACQ,OAAO,EAAE;MACzBR,aAAa,CAACQ,OAAO,CAACE,OAAO,CAAC,CAAC;IACjC;;IAEA;IACAV,aAAa,CAACQ,OAAO,GAAG,IAAI1B,KAAK,CAACyB,GAAG,EAAE;MACrCI,IAAI,EAAE,KAAK;MACXC,IAAI,EAAE;QACJzB,MAAM,EAAEA,MAAM;QACd0B,QAAQ,EAAE,CAAC;UACTD,IAAI,EAAEvB,MAAM;UACZyB,eAAe,EAAEvB;QACnB,CAAC;MACH;IACF,CAAC,CAAC;IAEF,MAAMwB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,CAAC,CAAC,CAAC;QACvE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,MAAMC,MAAM,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QACpC,IAAIlC,MAAM,GAAGmC,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC;QAChC,IAAI7B,MAAM,GAAG,EAAE;QACf,KAAI,IAAIiC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACrC,MAAM,CAACsC,MAAM,EAACD,CAAC,EAAE,EAAC;UAC9BjC,MAAM,CAACmC,IAAI,CAACzB,mBAAmB,CAAC,CAAC,CAAC;QACpC;QACAb,SAAS,CAACD,MAAM,CAAC;QACjBG,SAAS,CAACgC,MAAM,CAACjC,MAAM,CAAC+B,MAAM,CAAC,CAAC;QAChC5B,SAAS,CAACD,MAAM,CAAC;MACnB,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,QAAQ,CAACD,KAAK,CAAC;MACjB,CAAC,SAAS;QACRD,UAAU,CAAC,KAAK,CAAC;MACnB;MAEAF,YAAY,CAACD,SAAS,GAAG;QACvBN,MAAM,EAAEA,MAAM;QACdE,MAAM,EAAEA,MAAM;QACdE,MAAM,EAAEA;MACV,CAAC,CAAC;IAEJ,CAAC;IAEDwB,SAAS,CAAC,CAAC;;IAEX;IACA,OAAO,MAAM;MACX,IAAIf,aAAa,CAACQ,OAAO,EAAE;QACzBR,aAAa,CAACQ,OAAO,CAACE,OAAO,CAAC,CAAC;MACjC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIf,OAAO,EAAE;IACX,oBACEX,OAAA;MAAK2C,SAAS,EAAC,oBAAoB;MAAAC,QAAA,eACjC5C,OAAA;QAAK2C,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/B5C,OAAA,CAACH,gBAAgB;UAAAgD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,KACrB;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV;EAEA,IAAInC,KAAK,EAAE;IACT,oBAAOb,OAAA;MAAA4C,QAAA,GAAG,SAAO,EAAC/B,KAAK,CAACoC,OAAO;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EACtC;EAEA,oBACEhD,OAAA;IAAA4C,QAAA,gBACE5C,OAAA;MAAA4C,QAAA,EAAI;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtChD,OAAA;MAAQkD,GAAG,EAAEzC,SAAU;MAAC0C,KAAK,EAAE;IAAI;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,KACvC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAIV,CAAC;AAAC9C,EAAA,CApGID,cAAc;AAAAmD,EAAA,GAAdnD,cAAc;AAsGpB,eAAeA,cAAc;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}